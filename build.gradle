/*
 * Copyright (c) 2018. Martin Heinrich - All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

buildscript {
    ext.kotlin_version = '1.3.11'
    ext.dokka_version = '0.9.16'
    ext.jpersistence_version = '0.6.24H-SNAPSHOT'
    ext.coroutines_version = '1.1.0'
    ext.serialization_version = '0.9.1'
    ext.kutil_version = '0.0.5-SNAPSHOT'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'kotlin-platform-common'
apply plugin: 'maven-publish'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
}

def jvmProjects = subprojects.findAll { gradle.ext.jvmProjects.contains(it.name) }
def commonProjects = subprojects.findAll { gradle.ext.commonProjects.contains(it.name) }
def jsProjects = subprojects.findAll { gradle.ext.jsProjects.contains(it.name) }

group 'org.daiv.jpersistence'

allprojects {
    version "$jpersistence_version"
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    repositories {
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://daiv.org/artifactory/gradle-dev-local" }
    }
    artifactory {
        contextUrl = "${daiv_contextUrl}"
        //The base Artifactory URL if not overridden by the publisher/resolver
        publish {
            repository {
                repoKey = 'gradle-dev-local'
                username = "${daiv_user}"
                password = "${daiv_password}"
                maven = true
            }
            defaults {
                publications('mavenJava')
            }
        }
        resolve {
            repository {
                repoKey = 'gradle-dev'
                username = "${daiv_user}"
                password = "${daiv_password}"
                maven = true
            }
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

            artifact sourcesJar
//            artifact dokkaJavadoc
//            artifact javadocJar
            }
        }
    }
}
configure(jsProjects){
    apply plugin: 'kotlin2js'
    apply plugin: 'kotlin-platform-js'


    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-js"
        compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    }

}

configure(jvmProjects) {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-platform-jvm'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'org.jetbrains.dokka'

    repositories {
        maven { url "https://dl.bintray.com/jetbrains/spek" }
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.daiv.util:kutil-jvm:$kutil_version"
        compile 'io.github.microutils:kotlin-logging:1.5.9'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
        compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.27.2.1'

        testCompile "io.mockk:mockk:1.9.2"
        testCompile 'org.jetbrains.kotlin:kotlin-test:1.1.0'
        testCompile('org.jetbrains.spek:spek-api:1.1.5') {
            exclude group: 'org.jetbrains.kotlin'
        }
        testRuntime 'org.junit.platform:junit-platform-launcher:1.0.0'
        testRuntime('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
            exclude group: 'org.junit.platform'
            exclude group: 'org.jetbrains.kotlin'
        }
    }
    sourceCompatibility = 1.8
    junitPlatform {
        filters {
            engines {
                include 'spek'
            }
        }
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath

        options
                {
                    setMemberLevel JavadocMemberLevel.PUBLIC
                    setAuthor true

                    links "https://docs.oracle.com/javase/8/docs/api/"
                }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat = 'javadoc'
//    outputDirectory = javadoc.destinationDir
//    inputs.dir 'src/main/kotlin'
//}


//task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

